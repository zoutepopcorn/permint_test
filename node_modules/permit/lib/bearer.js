'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _permit = require('./permit');

var _permit2 = _interopRequireDefault(_permit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * A bearer token permit class.
 *
 * @type {Bearer}
 */

class Bearer extends _permit2.default {
  constructor(options = {}) {
    const { basic, query } = options,
          rest = _objectWithoutProperties(options, ['basic', 'query']);
    const scheme = basic ? ['Bearer', 'Basic'] : 'Bearer';
    super(_extends({ scheme }, rest));
    this.basic = basic;
    this.query = query;
  }

  check(req) {
    const { basic, query, proxy } = this;
    const auth = req.headers ? proxy ? req.headers['proxy-authorization'] : req.headers.authorization : null;

    if (auth) {
      const [scheme, credentials] = auth.split(' ');

      if (scheme === 'Bearer') {
        return credentials;
      }

      if (basic && scheme === 'Basic') {
        const ascii = Buffer.from(credentials, 'base64').toString('ascii');
        const [username, password] = ascii.split(':');
        if (basic === 'username') return username;
        if (basic === 'password') return password;
      }
    }

    if (query && req.url.includes('?')) {
      const parsed = _url2.default.parse(req.url, true);

      if (query in parsed.query) {
        return parsed.query[query];
      }
    }
  }
}

/**
 * Export.
 *
 * @type {Bearer}
 */

exports.default = Bearer;